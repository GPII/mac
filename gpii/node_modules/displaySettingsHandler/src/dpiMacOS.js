/*
 * DPI support for macOS
 *
 * Copyright 2016-2020 Raising the Floor -- US Inc. All rights reserved.
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 * 
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 */

"use strict";

/* The "DpiOffset" scheme here is modeled after Windows 10.
 *
 * Imagine that the screen resolution options on macOS are a "zoom level", like how Windows has zoom levels:
 *   [ 100, 125, 150, 175, 200, 225, 250, 300, 350, 400, 450, 500 ]
 * 
 * In this scenario, as an example, if the "default" DPI's % is 175%, then a dpiOffset of 0 is 175, 2 is 225, and -1 is 150.
 */

var fluid = require("gpii-universal");

var gpii = fluid.registerNamespace("gpii");
var macos = fluid.registerNamespace("gpii.macos");

/**
 * Sets the DPI scale of the primary display, by specifying the number of values away from an from the recommended
 * setting.
 *
 * @param {Number} offset The offset from the recommended setting.
 * @return {DpiConfig} The newly configured, actual, and minimum/maximum DPI offsets (see getScreenDpi).
 */
macos.display.setScreenDpi = function (offset) {
    var allScreenDpisWithDisplayModes = macos.display.getAllScreenDpisWithDisplayModes(/* adapter */);
    // sanity check
    if (!allScreenDpisWithDisplayModes || allScreenDpisWithDisplayModes.dpiDisplayModeMap.length == 0) {
        // NOTE: this code should never be executed
        return;
    }

    // capture the DisplayMode associated with this offset
    var dpiOffsetAsString = offset + "";
    var newDisplayMode = allScreenDpisWithDisplayModes.dpiDisplayModeMap[dpiOffsetAsString];
    if(!newDisplayMode) {
        fluid.fail("Screen DPI offset " + dpiOffsetAsString + " is invalid; could not set Screen DPI.");
        return;
    }

    gpii.macos.native.setCurrentDisplayMode(newDisplayMode);

    // Return the new configuration.
    return macos.display.getScreenDpi(/* adapter */);
};

/**
 * Get a list of all bounded screen DPI values (with associated screen modes)
 *
 * @return {DpiConfig} The full range of available screen DPIs (with associated screen modes)
 */
macos.display.getBoundedScreenDpisWithDisplayModes = function (adapter) {
    // NOTE: we ignore the adapter parameter (as we intentionally always reference the main display)

    // NOTE: if we want to change the allowed range of "screen DPIs" in the future (via filtering or otherwise): 
    //       this function's logic should be used by all other DPI mapping functions
    // NOTE: it is _not safe_ to remove DPIs in the middle of the range (i.e. only ones at the top or bottom) due to the fact that DPI
    //       offsets are tracked in absolute values (related to the default display resolution); any bounding must be simply "top and bottom"

    // for bounds purposes, establish a maximum number of Dpi Ssettings
    var maximumNumberOfDpiSettings = 8;

    var allScreenDpisWithDisplayModes = macos.display.getAllScreenDpisWithDisplayModes(adapter);
    // sanity check
    if (!allScreenDpisWithDisplayModes || allScreenDpisWithDisplayModes.dpiDisplayModeMap.length == 0) {
        // NOTE: this code should never be executed
        return;
    }

    var minimumDpiOffset = allScreenDpisWithDisplayModes.minimum;
    var maximumDpiOffset = allScreenDpisWithDisplayModes.maximum;
    
    // bounds enforcement: our DPI range cannot exceed eight values, so lower the maximum DPI as necessary
    // NOTE: this is not the same behavior as on Windows; on Windows the "minimumDpiOffset" must be >= -3 (and "maximumDpiOffset" is not well-defined)
    // NOTE: minimumDpiOffset is always <= 0
    if (maximumDpiOffset - minimumDpiOffset > maximumNumberOfDpiSettings) {
        maximumDpiOffset = maximumNumberOfDpiSettings + minimumDpiOffset - 1; 
    }

    var result = {
        minimum: minimumDpiOffset,
        maximum: maximumDpiOffset,
        dpiDisplayModeMap: {}
    };

    // add each available display mode to the map
    for (var dpiOffset = minimumDpiOffset; dpiOffset <= maximumDpiOffset; dpiOffset++) {
        var dpiOffsetAsString = dpiOffset + "";
        result.dpiDisplayModeMap[dpiOffsetAsString] = allScreenDpisWithDisplayModes.dpiDisplayModeMap[dpiOffsetAsString];
    }

    return result;
}

/**
 * Get a list of all screen DPI values (with associated screen modes)...including ones that are "out of bounds"
 *
 * @return {DpiConfig} The full range of available screen DPIs (with associated screen modes)
 */
macos.display.getAllScreenDpisWithDisplayModes = function (adapter) {
    // NOTE: we ignore the adapter parameter (as we intentionally always reference the main display)

    // NOTE: if we want to change the allowed range of "screen DPIs" in the future (via filtering or otherwise): 
    //       this function's logic should be used by all other DPI mapping functions

    // retrieve a filtered list of all available screen modes
    var availableDisplayModes = macos.display.getAvailableDisplayModes();
    // sanity check
    if (!availableDisplayModes || availableDisplayModes.length == 0) {
        // NOTE: this code should never be executed
        return;
    }

    // sort the list of available display modes in reverse
    availableDisplayModes = macos.display.sortDisplayModesByResolutionAscending(availableDisplayModes).reverse();

    // retrieve the default display mode
    var defaultDisplayMode = macos.display.getDefaultDisplayMode();
    // calculate the index of the default display mode
    var indexOfDefaultDisplayMode = null;
    for(var index = 0; index < availableDisplayModes.length; index++) {
        if (macos.display.displayModesAreEqual(availableDisplayModes[index], defaultDisplayMode)) {
            indexOfDefaultDisplayMode = index;
            break;
        }
    }
    // fail-safe: if index was not found, then assume index[0]
    if (indexOfDefaultDisplayMode == null) {
        // NOTE: this code should never be executed
        indexOfDefaultDisplayMode = availableDisplayModes[availableDisplayModes.length - 1];
    }

    // calculate the minimum, maximum, current and default "DPI" values as offsets from "default"
    var minimumDpiOffset = 0 - indexOfDefaultDisplayMode;
    var maximumDpiOffset = availableDisplayModes.length - 1 - indexOfDefaultDisplayMode;
    
    var result = {
        minimum: minimumDpiOffset,
        maximum: maximumDpiOffset,
        dpiDisplayModeMap: {}
    };

    // add each available display mode to the map
    for (var index = 0; index < availableDisplayModes.length; index += 1) {
        var dpiAsString = (index - indexOfDefaultDisplayMode) + "";
        result.dpiDisplayModeMap[dpiAsString] = availableDisplayModes[index];
    }

    return result;
}

/**
 * Get the configured, maximum, and actual DPI values of the primary display.
 *
 * The value is the number of "notches" away from the recommended setting of the display.
 *
 * The configured scale is what DPI should be if the resolution is high enough, the maximum scale is the highest DPI
 * scale that the current screen resolution supports. The actual scale (what the user is looking at) is the configured
 * scale, capped at the maximum.
 *
 * @param {Object} adapter [optional] The adapter id pair (from getAdapter()).
 * @return {DpiConfig} The newly configured, actual, and minimum/maximum DPI offsets
 */
macos.display.getScreenDpi = function (adapter) {
    // NOTE: we ignore the adapter parameter (as we intentionally always reference the main display)

    // retrieve a list of all allowable screenDpis with their associated DisplayModes.
    var allScreenDpisWithDisplayModes = macos.display.getAllScreenDpisWithDisplayModes();
    // sanity check
    if (!allScreenDpisWithDisplayModes || allScreenDpisWithDisplayModes.dpiDisplayModeMap.length == 0) {
        // NOTE: this code should never be executed
        return;
    }

    // retrieve a list of all bounded screenDpis with their associated DisplayModes.  [This list is a subset of the "all" list]
    var boundedScreenDpisWithDisplayModes = macos.display.getBoundedScreenDpisWithDisplayModes();
    // sanity check
    if (!boundedScreenDpisWithDisplayModes || boundedScreenDpisWithDisplayModes.dpiDisplayModeMap.length == 0) {
        // NOTE: this code should never be executed
        return;
    }
    
    // retrieve the current display mode
    var currentDisplayMode = macos.native.getCurrentDisplayMode();
    //
    // calculate the dpiOffset of the current display mode
    var dpiOfCurrentDisplayMode = null;
    for(var dpiOffset = allScreenDpisWithDisplayModes.minimum; dpiOffset <= allScreenDpisWithDisplayModes.maximum; dpiOffset++) {
        var dpiOffsetAsString = dpiOffset + "";
        if (macos.display.displayModesAreEqual(allScreenDpisWithDisplayModes.dpiDisplayModeMap[dpiOffsetAsString], currentDisplayMode)) {
            dpiOfCurrentDisplayMode = dpiOffset;
            break;
        }
    }

    // calculate the minimum, maximum, current and default "DPI" values as offsets from "default"
    var minimumDpiOffset = boundedScreenDpisWithDisplayModes.minimum;
    // var defaultDpiOffset = 0; // default DPI offset is always zero
    var currentDpiOffset = dpiOfCurrentDisplayMode;
    var maximumDpiOffset = boundedScreenDpisWithDisplayModes.maximum;

    return {
        configured: currentDpiOffset, // current resolution // NOTE: we do not use 'Math.max(currentDpiOffset, minimumDpiOffset)' here so that we are logically compatible with the Windows implementation
        minimum: minimumDpiOffset,
        maximum: maximumDpiOffset,
        actual: Math.min(currentDpiOffset, maximumDpiOffset) // current resolution (bound by maximum DPI setting)
    };
};

// /**
//  * DPI Configuration.
//  * @typedef {Object} DpiConfig
//  * @property {Number} configured The desired DPI setting.
//  * @property {Number} minimum The minimum available DPI setting.
//  * @property {Number} maximum The maximum available DPI setting.
//  * @property {Number} actual The actual DPI setting - the same as configured, but clamped to minimum and maximum.
//  */


fluid.defaults("gpii.macos.display.getScreenDpi", {
    gradeNames: "fluid.function",
    argumentMap: {}
});
